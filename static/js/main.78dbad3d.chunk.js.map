{"version":3,"sources":["common/c1-SuperInputText/SuperInputText.module.css","common/c3-SuperCheckbox/SuperCheckbox.module.css","common/c2-SuperButton/SuperButton.module.css","features/Login/Login.tsx","features/Registration/Registration.tsx","features/Profile/Profile.tsx","features/Password/PasswordRecovery.tsx","features/Password/NewPassword.tsx","common/c2-SuperButton/SuperButton.tsx","common/c1-SuperInputText/SuperInputText.tsx","common/c3-SuperCheckbox/SuperCheckbox.tsx","features/Test/Test.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["module","exports","Login","Registration","Profile","PasswordRecovery","NewPassword","SuperButton","red","className","restProps","finalClassName","s","default","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","finalInputClassName","errorInput","superInput","wrappInput","e","currentTarget","value","key","SuperCheckbox","onChangeChecked","children","checkbox","customcheckbox","checked","Test","App","exact","path","render","from","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78dbad3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__1vxqi\",\"errorInput\":\"SuperInputText_errorInput__3bFkY\",\"error\":\"SuperInputText_error__14O3v\",\"wrappInput\":\"SuperInputText_wrappInput__2NtTD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__3rd6C\",\"spanClassName\":\"SuperCheckbox_spanClassName__EK5S0\",\"customcheckbox\":\"SuperCheckbox_customcheckbox__17gnO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1oC5E\",\"red\":\"SuperButton_red__QLaO5\"};","import React from 'react'\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n\r\n\r\n    // const dispatch = useDispatch()\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //         email: '',\r\n    //         password: '',\r\n    //         rememberMe: false\r\n    //     },\r\n    //     validate: (values) => {\r\n    //         const errors: FormikErrorType = {};\r\n    //         if (!values.email) {\r\n    //             errors.email = 'Required';\r\n    //         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    //             errors.email = 'Invalid email address';\r\n    //         }\r\n    //         if (!values.password) {\r\n    //             errors.password = 'Required Password'\r\n    //         } else if (values.password.length < 3) {\r\n    //             errors.password = 'password must be > 2 sumbols';\r\n    //         }\r\n    //\r\n    //         return errors;\r\n    //     },\r\n    //     onSubmit: values => {\r\n    //         const email = values.email\r\n    //         const password = values.password\r\n    //         const rememberMe = values.rememberMe\r\n    //         dispatch(loginTC({email, password, rememberMe}))\r\n    //         // alert(JSON.stringify(values))\r\n    //         formik.resetForm()\r\n    //     }\r\n    //\r\n    //\r\n    // })\r\n    // const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    // if(isLoggedIn){\r\n    //     return <Redirect to={'/'}/>\r\n    // }\r\n    //\r\n    // return <Grid container justify=\"center\">\r\n    //     <Grid item xs={4}>\r\n    //         <form onSubmit={formik.handleSubmit}>\r\n    //             <FormControl>\r\n    //                 <FormLabel>\r\n    //                     <p>To log in get registered\r\n    //                         <a href={'https://social-network.samuraijs.com/'}\r\n    //                            target={'_blank'}>here\r\n    //                         </a>\r\n    //                     </p>\r\n    //                     <p>or use common test account credentials:</p>\r\n    //                     <p>Email: free@samuraijs.com</p>\r\n    //                     <p>Password: free</p>\r\n    //                 </FormLabel>\r\n    //                 <FormGroup>\r\n    //                     <TextField\r\n    //                         label=\"Email\"\r\n    //                         margin=\"normal\"\r\n    //                         {...formik.getFieldProps('email')}\r\n    //                         // name=\"email\"\r\n    //                         // onChange={formik.handleChange}\r\n    //                         // value={formik.values.email}\r\n    //                     />\r\n    //                     {formik.touched.email && formik.errors.email ?\r\n    //                         <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n    //                     <TextField\r\n    //                         onBlur={formik.handleBlur}\r\n    //                         type=\"password\"\r\n    //                         label=\"Password\"\r\n    //                         margin=\"normal\"\r\n    //                         name='password'\r\n    //                         onChange={formik.handleChange}\r\n    //                         value={formik.values.password}\r\n    //                     />\r\n    //                     {formik.touched.password && formik.errors.password ?\r\n    //                         <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n    //\r\n    //                     <FormControlLabel\r\n    //                         label={'Remember me'}\r\n    //                         control={<Checkbox\r\n    //                             onBlur={formik.handleBlur}\r\n    //                             onChange={formik.handleChange}\r\n    //                             checked={formik.values.rememberMe}\r\n    //                             name=\"rememberMe\"\r\n    //                         />}\r\n    //                     />\r\n    //                     <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n    //                 </FormGroup>\r\n    //             </FormControl>\r\n    //\r\n    //         </form>\r\n    //\r\n    //     </Grid>\r\n    // </Grid>\r\n    return <>\r\n        login\r\n    </>\r\n}\r\n","import React, {useEffect} from 'react'\r\n// import {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Registration = () => {\r\n\r\n\r\n\r\n    // const dispatch = useDispatch()\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //         email: '',\r\n    //         password: '',\r\n    //         rememberMe: false\r\n    //     },\r\n    //     validate: (values) => {\r\n    //         const errors: FormikErrorType = {};\r\n    //         if (!values.email) {\r\n    //             errors.email = 'Required';\r\n    //         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    //             errors.email = 'Invalid email address';\r\n    //         }\r\n    //         if (!values.password) {\r\n    //             errors.password = 'Required Password'\r\n    //         } else if (values.password.length < 3) {\r\n    //             errors.password = 'password must be > 2 sumbols';\r\n    //         }\r\n    //\r\n    //         return errors;\r\n    //     },\r\n    //     onSubmit: values => {\r\n    //         const email = values.email\r\n    //         const password = values.password\r\n    //         const rememberMe = values.rememberMe\r\n    //         dispatch(loginTC({email, password, rememberMe}))\r\n    //         // alert(JSON.stringify(values))\r\n    //         formik.resetForm()\r\n    //     }\r\n    //\r\n    //\r\n    // })\r\n    // const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    // if(isLoggedIn){\r\n    //     return <Redirect to={'/'}/>\r\n    // }\r\n    //\r\n    // return <Grid container justify=\"center\">\r\n    //     <Grid item xs={4}>\r\n    //         <form onSubmit={formik.handleSubmit}>\r\n    //             <FormControl>\r\n    //                 <FormLabel>\r\n    //                     <p>To log in get registered\r\n    //                         <a href={'https://social-network.samuraijs.com/'}\r\n    //                            target={'_blank'}>here\r\n    //                         </a>\r\n    //                     </p>\r\n    //                     <p>or use common test account credentials:</p>\r\n    //                     <p>Email: free@samuraijs.com</p>\r\n    //                     <p>Password: free</p>\r\n    //                 </FormLabel>\r\n    //                 <FormGroup>\r\n    //                     <TextField\r\n    //                         label=\"Email\"\r\n    //                         margin=\"normal\"\r\n    //                         {...formik.getFieldProps('email')}\r\n    //                         // name=\"email\"\r\n    //                         // onChange={formik.handleChange}\r\n    //                         // value={formik.values.email}\r\n    //                     />\r\n    //                     {formik.touched.email && formik.errors.email ?\r\n    //                         <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n    //                     <TextField\r\n    //                         onBlur={formik.handleBlur}\r\n    //                         type=\"password\"\r\n    //                         label=\"Password\"\r\n    //                         margin=\"normal\"\r\n    //                         name='password'\r\n    //                         onChange={formik.handleChange}\r\n    //                         value={formik.values.password}\r\n    //                     />\r\n    //                     {formik.touched.password && formik.errors.password ?\r\n    //                         <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n    //\r\n    //                     <FormControlLabel\r\n    //                         label={'Remember me'}\r\n    //                         control={<Checkbox\r\n    //                             onBlur={formik.handleBlur}\r\n    //                             onChange={formik.handleChange}\r\n    //                             checked={formik.values.rememberMe}\r\n    //                             name=\"rememberMe\"\r\n    //                         />}\r\n    //                     />\r\n    //                     <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n    //                 </FormGroup>\r\n    //             </FormControl>\r\n    //\r\n    //         </form>\r\n    //\r\n    //     </Grid>\r\n    // </Grid>\r\n    return <>\r\n        Registration\r\n    </>\r\n}\r\n","import React from 'react'\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Profile = () => {\r\n\r\n\r\n\r\n    // const dispatch = useDispatch()\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //         email: '',\r\n    //         password: '',\r\n    //         rememberMe: false\r\n    //     },\r\n    //     validate: (values) => {\r\n    //         const errors: FormikErrorType = {};\r\n    //         if (!values.email) {\r\n    //             errors.email = 'Required';\r\n    //         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    //             errors.email = 'Invalid email address';\r\n    //         }\r\n    //         if (!values.password) {\r\n    //             errors.password = 'Required Password'\r\n    //         } else if (values.password.length < 3) {\r\n    //             errors.password = 'password must be > 2 sumbols';\r\n    //         }\r\n    //\r\n    //         return errors;\r\n    //     },\r\n    //     onSubmit: values => {\r\n    //         const email = values.email\r\n    //         const password = values.password\r\n    //         const rememberMe = values.rememberMe\r\n    //         dispatch(loginTC({email, password, rememberMe}))\r\n    //         // alert(JSON.stringify(values))\r\n    //         formik.resetForm()\r\n    //     }\r\n    //\r\n    //\r\n    // })\r\n    // const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    // if(isLoggedIn){\r\n    //     return <Redirect to={'/'}/>\r\n    // }\r\n    //\r\n    // return <Grid container justify=\"center\">\r\n    //     <Grid item xs={4}>\r\n    //         <form onSubmit={formik.handleSubmit}>\r\n    //             <FormControl>\r\n    //                 <FormLabel>\r\n    //                     <p>To log in get registered\r\n    //                         <a href={'https://social-network.samuraijs.com/'}\r\n    //                            target={'_blank'}>here\r\n    //                         </a>\r\n    //                     </p>\r\n    //                     <p>or use common test account credentials:</p>\r\n    //                     <p>Email: free@samuraijs.com</p>\r\n    //                     <p>Password: free</p>\r\n    //                 </FormLabel>\r\n    //                 <FormGroup>\r\n    //                     <TextField\r\n    //                         label=\"Email\"\r\n    //                         margin=\"normal\"\r\n    //                         {...formik.getFieldProps('email')}\r\n    //                         // name=\"email\"\r\n    //                         // onChange={formik.handleChange}\r\n    //                         // value={formik.values.email}\r\n    //                     />\r\n    //                     {formik.touched.email && formik.errors.email ?\r\n    //                         <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n    //                     <TextField\r\n    //                         onBlur={formik.handleBlur}\r\n    //                         type=\"password\"\r\n    //                         label=\"Password\"\r\n    //                         margin=\"normal\"\r\n    //                         name='password'\r\n    //                         onChange={formik.handleChange}\r\n    //                         value={formik.values.password}\r\n    //                     />\r\n    //                     {formik.touched.password && formik.errors.password ?\r\n    //                         <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n    //\r\n    //                     <FormControlLabel\r\n    //                         label={'Remember me'}\r\n    //                         control={<Checkbox\r\n    //                             onBlur={formik.handleBlur}\r\n    //                             onChange={formik.handleChange}\r\n    //                             checked={formik.values.rememberMe}\r\n    //                             name=\"rememberMe\"\r\n    //                         />}\r\n    //                     />\r\n    //                     <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n    //                 </FormGroup>\r\n    //             </FormControl>\r\n    //\r\n    //         </form>\r\n    //\r\n    //     </Grid>\r\n    // </Grid>\r\n    return <>\r\n        Profile\r\n    </>\r\n}\r\n","import React from 'react'\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n\r\n\r\n    // const dispatch = useDispatch()\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //         email: '',\r\n    //         password: '',\r\n    //         rememberMe: false\r\n    //     },\r\n    //     validate: (values) => {\r\n    //         const errors: FormikErrorType = {};\r\n    //         if (!values.email) {\r\n    //             errors.email = 'Required';\r\n    //         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    //             errors.email = 'Invalid email address';\r\n    //         }\r\n    //         if (!values.password) {\r\n    //             errors.password = 'Required Password'\r\n    //         } else if (values.password.length < 3) {\r\n    //             errors.password = 'password must be > 2 sumbols';\r\n    //         }\r\n    //\r\n    //         return errors;\r\n    //     },\r\n    //     onSubmit: values => {\r\n    //         const email = values.email\r\n    //         const password = values.password\r\n    //         const rememberMe = values.rememberMe\r\n    //         dispatch(loginTC({email, password, rememberMe}))\r\n    //         // alert(JSON.stringify(values))\r\n    //         formik.resetForm()\r\n    //     }\r\n    //\r\n    //\r\n    // })\r\n    // const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    // if(isLoggedIn){\r\n    //     return <Redirect to={'/'}/>\r\n    // }\r\n    //\r\n    // return <Grid container justify=\"center\">\r\n    //     <Grid item xs={4}>\r\n    //         <form onSubmit={formik.handleSubmit}>\r\n    //             <FormControl>\r\n    //                 <FormLabel>\r\n    //                     <p>To log in get registered\r\n    //                         <a href={'https://social-network.samuraijs.com/'}\r\n    //                            target={'_blank'}>here\r\n    //                         </a>\r\n    //                     </p>\r\n    //                     <p>or use common test account credentials:</p>\r\n    //                     <p>Email: free@samuraijs.com</p>\r\n    //                     <p>Password: free</p>\r\n    //                 </FormLabel>\r\n    //                 <FormGroup>\r\n    //                     <TextField\r\n    //                         label=\"Email\"\r\n    //                         margin=\"normal\"\r\n    //                         {...formik.getFieldProps('email')}\r\n    //                         // name=\"email\"\r\n    //                         // onChange={formik.handleChange}\r\n    //                         // value={formik.values.email}\r\n    //                     />\r\n    //                     {formik.touched.email && formik.errors.email ?\r\n    //                         <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n    //                     <TextField\r\n    //                         onBlur={formik.handleBlur}\r\n    //                         type=\"password\"\r\n    //                         label=\"Password\"\r\n    //                         margin=\"normal\"\r\n    //                         name='password'\r\n    //                         onChange={formik.handleChange}\r\n    //                         value={formik.values.password}\r\n    //                     />\r\n    //                     {formik.touched.password && formik.errors.password ?\r\n    //                         <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n    //\r\n    //                     <FormControlLabel\r\n    //                         label={'Remember me'}\r\n    //                         control={<Checkbox\r\n    //                             onBlur={formik.handleBlur}\r\n    //                             onChange={formik.handleChange}\r\n    //                             checked={formik.values.rememberMe}\r\n    //                             name=\"rememberMe\"\r\n    //                         />}\r\n    //                     />\r\n    //                     <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n    //                 </FormGroup>\r\n    //             </FormControl>\r\n    //\r\n    //         </form>\r\n    //\r\n    //     </Grid>\r\n    // </Grid>\r\n    return <>\r\n        PasswordRecovery\r\n    </>\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const NewPassword = () => {\r\n\r\n\r\n\r\n    // const dispatch = useDispatch()\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //         email: '',\r\n    //         password: '',\r\n    //         rememberMe: false\r\n    //     },\r\n    //     validate: (values) => {\r\n    //         const errors: FormikErrorType = {};\r\n    //         if (!values.email) {\r\n    //             errors.email = 'Required';\r\n    //         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    //             errors.email = 'Invalid email address';\r\n    //         }\r\n    //         if (!values.password) {\r\n    //             errors.password = 'Required Password'\r\n    //         } else if (values.password.length < 3) {\r\n    //             errors.password = 'password must be > 2 sumbols';\r\n    //         }\r\n    //\r\n    //         return errors;\r\n    //     },\r\n    //     onSubmit: values => {\r\n    //         const email = values.email\r\n    //         const password = values.password\r\n    //         const rememberMe = values.rememberMe\r\n    //         dispatch(loginTC({email, password, rememberMe}))\r\n    //         // alert(JSON.stringify(values))\r\n    //         formik.resetForm()\r\n    //     }\r\n    //\r\n    //\r\n    // })\r\n    // const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    // if(isLoggedIn){\r\n    //     return <Redirect to={'/'}/>\r\n    // }\r\n    //\r\n    // return <Grid container justify=\"center\">\r\n    //     <Grid item xs={4}>\r\n    //         <form onSubmit={formik.handleSubmit}>\r\n    //             <FormControl>\r\n    //                 <FormLabel>\r\n    //                     <p>To log in get registered\r\n    //                         <a href={'https://social-network.samuraijs.com/'}\r\n    //                            target={'_blank'}>here\r\n    //                         </a>\r\n    //                     </p>\r\n    //                     <p>or use common test account credentials:</p>\r\n    //                     <p>Email: free@samuraijs.com</p>\r\n    //                     <p>Password: free</p>\r\n    //                 </FormLabel>\r\n    //                 <FormGroup>\r\n    //                     <TextField\r\n    //                         label=\"Email\"\r\n    //                         margin=\"normal\"\r\n    //                         {...formik.getFieldProps('email')}\r\n    //                         // name=\"email\"\r\n    //                         // onChange={formik.handleChange}\r\n    //                         // value={formik.values.email}\r\n    //                     />\r\n    //                     {formik.touched.email && formik.errors.email ?\r\n    //                         <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n    //                     <TextField\r\n    //                         onBlur={formik.handleBlur}\r\n    //                         type=\"password\"\r\n    //                         label=\"Password\"\r\n    //                         margin=\"normal\"\r\n    //                         name='password'\r\n    //                         onChange={formik.handleChange}\r\n    //                         value={formik.values.password}\r\n    //                     />\r\n    //                     {formik.touched.password && formik.errors.password ?\r\n    //                         <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n    //\r\n    //                     <FormControlLabel\r\n    //                         label={'Remember me'}\r\n    //                         control={<Checkbox\r\n    //                             onBlur={formik.handleBlur}\r\n    //                             onChange={formik.handleChange}\r\n    //                             checked={formik.values.rememberMe}\r\n    //                             name=\"rememberMe\"\r\n    //                         />}\r\n    //                     />\r\n    //                     <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n    //                 </FormGroup>\r\n    //             </FormControl>\r\n    //\r\n    //         </form>\r\n    //\r\n    //     </Grid>\r\n    // </Grid>\r\n    return <>\r\n        new password\r\n    </>\r\n}\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = error?` ${s.errorInput}`:`${s.superInput} ${className ? className : '' }`  // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <div className={s.wrappInput}>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n        onChange && onChange(e)\r\n        onChangeChecked &&onChangeChecked(e.currentTarget.checked)\r\n        }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label className={s.customcheckbox}>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {useEffect} from 'react'\r\n\r\nimport SuperButton from \"../../common/c2-SuperButton/SuperButton\";\r\nimport SuperInputText from \"../../common/c1-SuperInputText/SuperInputText\";\r\nimport SuperCheckbox from \"../../common/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\n\r\n\r\nexport const Test = () => {\r\n\r\n    return <>\r\n\r\n        <SuperButton>button</SuperButton>\r\n        <SuperInputText/>\r\n        <SuperCheckbox>text </SuperCheckbox>\r\n    </>\r\n}\r\n","import {Redirect, Route, Switch} from 'react-router-dom'\nimport './App.css';\nimport {Login} from \"./features/Login/Login\";\nimport {Registration} from \"./features/Registration/Registration\";\nimport {Profile} from \"./features/Profile/Profile\";\nimport {PasswordRecovery} from \"./features/Password/PasswordRecovery\";\nimport {NewPassword} from \"./features/Password/NewPassword\";\nimport {Test} from \"./features/Test/Test\";\n\nfunction App() {\n    return (\n        <div>\n            <Switch>\n                <Route exact path={'/'} render={() => <Profile/>}/>\n                <Route path={'/login'} render={() => <Login/>}/>\n                <Route path={'/registration'} render={() => <Registration/>}/>\n                <Route path={'/passwodrecovery'} render={() => <PasswordRecovery/>}/>\n                <Route path={'/newpasswopd'} render={() => <NewPassword/>}/>\n                <Route path={'/test'} render={() => <Test/>}/>\n                <Redirect from={'*'} to={'/404'}/>\n            </Switch>\n            <Route path={'/404'} render={() => <h1>404 page not found</h1>}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}